version: '3.8'

# Tektra AI Assistant - Production Docker Compose
# Complete production deployment with all dependencies

services:
  # Main Tektra application
  tektra:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        TEKTRA_VERSION: ${TEKTRA_VERSION:-1.0.0}
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    image: tektra:${TEKTRA_VERSION:-latest}
    container_name: tektra-app
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - prometheus
    ports:
      - "${TEKTRA_PORT:-8000}:8000"
      - "${TEKTRA_METRICS_PORT:-8090}:8090"
    environment:
      # Database configuration
      TEKTRA_DATABASE__URL: postgresql://tektra:${POSTGRES_PASSWORD}@postgres:5432/tektra
      TEKTRA_DATABASE__POOL_SIZE: 20
      TEKTRA_DATABASE__SSL_REQUIRED: false
      
      # Redis configuration
      TEKTRA_REDIS__URL: redis://redis:6379/0
      TEKTRA_REDIS__PASSWORD: ${REDIS_PASSWORD}
      
      # Security configuration
      TEKTRA_SECURITY__JWT_SECRET: ${JWT_SECRET}
      TEKTRA_SECURITY__SECRET_KEY: ${SECRET_KEY}
      TEKTRA_SECURITY__DEFAULT_SECURITY_LEVEL: high
      
      # Performance configuration
      TEKTRA_PERFORMANCE__MAX_MEMORY_MB: ${TEKTRA_MAX_MEMORY_MB:-4096}
      TEKTRA_PERFORMANCE__CACHE_SIZE_MB: ${TEKTRA_CACHE_SIZE_MB:-1024}
      TEKTRA_PERFORMANCE__MAX_WORKERS: ${TEKTRA_MAX_WORKERS:-10}
      
      # Agent configuration
      TEKTRA_AGENTS__MAX_CONCURRENT_AGENTS: ${TEKTRA_MAX_AGENTS:-20}
      TEKTRA_AGENTS__AGENT_TIMEOUT_SECONDS: 600
      
      # Monitoring configuration
      TEKTRA_MONITORING__PROMETHEUS_ENABLED: true
      TEKTRA_MONITORING__PROMETHEUS_PORT: 8090
      TEKTRA_MONITORING__LOG_LEVEL: INFO
      
      # Application configuration
      TEKTRA_ENV: production
      TEKTRA_DEBUG: false
      TEKTRA_HOST: 0.0.0.0
      TEKTRA_PORT: 8000
    volumes:
      - tektra-data:/app/data
      - tektra-logs:/app/logs
      - tektra-temp:/app/temp
      - ./config/production:/app/config/production:ro
    networks:
      - tektra-network
    healthcheck:
      test: ["CMD", "./healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: tektra-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: tektra
      POSTGRES_USER: tektra
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - tektra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tektra -d tektra"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis cache and session store
  redis:
    image: redis:7-alpine
    container_name: tektra-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - tektra-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: tektra-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
    networks:
      - tektra-network
    depends_on:
      - tektra
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: tektra-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - tektra-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: tektra-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - tektra-network
    depends_on:
      - tektra
      - grafana
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes for persistent data
volumes:
  tektra-data:
    driver: local
  tektra-logs:
    driver: local
  tektra-temp:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local

# Network for service communication
networks:
  tektra-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16